//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GrappleGun"",
            ""id"": ""8318a00a-7296-4724-bf50-b58425a1db7f"",
            ""actions"": [
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""61f0c854-112f-4083-a532-8d4d4d3abdf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7856377e-6ddd-41f1-a5db-0cab1d8c0a44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""063a35fd-74eb-40be-89be-48d200e04dba"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c86d2d5a-6295-43c6-a15a-ac07dd2d3b82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd8b445e-d709-499b-bbdc-17d6818cd98c"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""834fdf45-3a8b-491a-a5ae-a3e9a473e8a6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc7f0d43-8ae8-4155-8c84-eb7963d5fe0f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2955ca-33be-4019-aa95-82c900fcfd53"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GrappleGun
        m_GrappleGun = asset.FindActionMap("GrappleGun", throwIfNotFound: true);
        m_GrappleGun_Grapple = m_GrappleGun.FindAction("Grapple", throwIfNotFound: true);
        m_GrappleGun_Shoot = m_GrappleGun.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GrappleGun
    private readonly InputActionMap m_GrappleGun;
    private List<IGrappleGunActions> m_GrappleGunActionsCallbackInterfaces = new List<IGrappleGunActions>();
    private readonly InputAction m_GrappleGun_Grapple;
    private readonly InputAction m_GrappleGun_Shoot;
    public struct GrappleGunActions
    {
        private @PlayerControls m_Wrapper;
        public GrappleGunActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grapple => m_Wrapper.m_GrappleGun_Grapple;
        public InputAction @Shoot => m_Wrapper.m_GrappleGun_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_GrappleGun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrappleGunActions set) { return set.Get(); }
        public void AddCallbacks(IGrappleGunActions instance)
        {
            if (instance == null || m_Wrapper.m_GrappleGunActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrappleGunActionsCallbackInterfaces.Add(instance);
            @Grapple.started += instance.OnGrapple;
            @Grapple.performed += instance.OnGrapple;
            @Grapple.canceled += instance.OnGrapple;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IGrappleGunActions instance)
        {
            @Grapple.started -= instance.OnGrapple;
            @Grapple.performed -= instance.OnGrapple;
            @Grapple.canceled -= instance.OnGrapple;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IGrappleGunActions instance)
        {
            if (m_Wrapper.m_GrappleGunActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGrappleGunActions instance)
        {
            foreach (var item in m_Wrapper.m_GrappleGunActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrappleGunActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GrappleGunActions @GrappleGun => new GrappleGunActions(this);
    public interface IGrappleGunActions
    {
        void OnGrapple(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
